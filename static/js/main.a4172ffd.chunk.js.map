{"version":3,"sources":["service/supabase.ts","hooks/useAuth.ts","components/LoginModal.tsx","components/SignUpModal.tsx","components/Header.tsx","hooks/useMessage.ts","components/MessageList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["supabaseClient","createClient","process","autoRefreshToken","persistSession","detectSessionInUrl","useAuth","signUp","email","password","auth","signIn","getSession","a","session","LoginModal","isModalOpen","onClose","useState","error","setError","loading","setLoading","title","visible","onCancel","okButtonProps","style","display","cancelButtonProps","centered","layout","initialValues","wrapperCol","textAlign","onFinish","then","data","user","message","catch","err","Item","label","name","rules","required","onFocus","Password","type","htmlType","SignUpModal","AntHeader","Layout","Header","loginModal","setLoginModal","signUpModal","setSignUpModal","Fragment","flexDirection","justifyContent","color","fontSize","cursor","onClick","signOut","padding","useMessage","messages","setMessages","limit","setLimit","useEffect","from","on","handleInsert","subscribe","select","order","ascending","reverse","payload","new","addNewMessage","user_id","insert","id","uuidv4","increaseLimit","MessageList","formRef","useRef","justify","align","xs","sm","md","itemLayout","dataSource","height","renderItem","item","index","placeContent","Meta","description","Date","created_at","toLocaleDateString","toLocaleTimeString","ref","e","current","resetFields","messageAnt","width","margin","placeholder","Content","App","setUser","onAuthStateChange","minHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4172ffd.chunk.js","sourcesContent":["import { createClient, SupabaseClientOptions } from \"@supabase/supabase-js\";\n\nconst supabaseOptions: SupabaseClientOptions = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n};\n\nconst supabaseClient = createClient(\n  process.env.REACT_APP_SUPABASE_URL ? process.env.REACT_APP_SUPABASE_URL : \"\",\n  process.env.REACT_APP_SUPABASE_PUBLIC_KEY\n    ? process.env.REACT_APP_SUPABASE_PUBLIC_KEY\n    : \"\",\n  supabaseOptions\n);\n\nexport { supabaseClient };\n","import { supabaseClient } from \"../service/supabase\";\n\nconst useAuth = () => {\n  const signIn = (email: string, password: string) =>\n    supabaseClient.auth.signIn({ email, password });\n\n  const signUp = (email: string, password: string) =>\n    supabaseClient.auth.signUp({ email, password });\n\n  const getSession = async () => {\n    const session = supabaseClient.auth.session();\n    return session;\n  };\n  return {\n    signUp,\n    signIn,\n    getSession,\n  };\n};\n\nexport default useAuth;\n","import { useState } from \"react\";\nimport { Alert, Button, Form, Input, Modal } from \"antd\";\nimport { supabaseClient } from \"../service/supabase\";\ntype ON_SUBMIT = {\n  email: string;\n  password: string;\n};\n\ntype LOGIN_MODAL = {\n  isModalOpen: boolean;\n  onClose: () => void;\n};\n\nconst LoginModal = ({ isModalOpen = false, onClose }: LOGIN_MODAL) => {\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const onFinish = ({ email, password }: ON_SUBMIT) => {\n    supabaseClient.auth\n      .signIn({ email, password })\n      .then((data) => {\n        setLoading(false);\n        if (!data.error && data.user) {\n          onClose();\n        } else if (data.error) {\n          setError(data.error.message);\n        }\n      })\n      .catch((err) => {\n        setError(err);\n        setLoading(false);\n      });\n  };\n  return (\n    <Modal\n      title=\"Login\"\n      visible={isModalOpen}\n      onCancel={onClose}\n      okButtonProps={{ style: { display: \"none\" } }}\n      cancelButtonProps={{ style: { display: \"none\" } }}\n      centered\n    >\n      <Form\n        layout=\"vertical\"\n        initialValues={{ email: \"\", password: \"\" }}\n        wrapperCol={{ style: { textAlign: \"center\" } }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your email!\" }]}\n        >\n          <Input onFocus={() => setError(\"\")} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password onFocus={() => setError(\"\")} />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            Login\n          </Button>\n        </Form.Item>\n        {error && <Alert message={error} type=\"error\" />}\n      </Form>\n    </Modal>\n  );\n};\n\nexport default LoginModal;\n","import { Alert, Button, Form, Input, Modal } from \"antd\";\nimport { useState } from \"react\";\nimport { supabaseClient } from \"../service/supabase\";\ntype ON_SUBMIT = {\n  email: string;\n  password: string;\n};\n\ntype SIGNUP_MODAL = {\n  isModalOpen: boolean;\n  onClose: () => void;\n};\n\nconst SignUpModal = ({ isModalOpen = false, onClose }: SIGNUP_MODAL) => {\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const onFinish = ({ email, password }: ON_SUBMIT) => {\n    setLoading(true);\n    supabaseClient.auth\n      .signUp({ email, password })\n      .then((data) => {\n        setLoading(false);\n        if (!data.error && data.user) {\n          onClose();\n        } else if (data.error) {\n          setError(data.error.message);\n        }\n      })\n      .catch((err) => {\n        setError(err);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <Modal\n      title=\"Login\"\n      visible={isModalOpen}\n      onCancel={onClose}\n      okButtonProps={{ style: { display: \"none\" } }}\n      cancelButtonProps={{ style: { display: \"none\" } }}\n      centered\n    >\n      <Form\n        layout=\"vertical\"\n        initialValues={{ email: \"\", password: \"\" }}\n        wrapperCol={{ style: { textAlign: \"center\" } }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          rules={[{ required: true, message: \"Please input your email!\" }]}\n        >\n          <Input onFocus={() => setError(\"\")} />\n        </Form.Item>\n\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[{ required: true, message: \"Please input your password!\" }]}\n        >\n          <Input.Password onFocus={() => setError(\"\")} />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" loading={loading}>\n            Login\n          </Button>\n        </Form.Item>\n        {error && <Alert message={error} type=\"error\" />}\n      </Form>\n    </Modal>\n  );\n};\n\nexport default SignUpModal;\n","import React, { useState } from \"react\";\nimport { Layout } from \"antd\";\nimport { User } from \"@supabase/supabase-js\";\n\nimport { supabaseClient } from \"../service/supabase\";\n\nimport LoginModal from \"./LoginModal\";\nimport SignUpModal from \"./SignUpModal\";\n\nconst { Header: AntHeader } = Layout;\n\nconst Header = ({ user }: { user: User | null }) => {\n  const [loginModal, setLoginModal] = useState(false);\n  const [signUpModal, setSignUpModal] = useState(false);\n\n  const onLogout = () => supabaseClient.auth.signOut();\n\n  return (\n    <React.Fragment>\n      <LoginModal\n        isModalOpen={loginModal}\n        onClose={() => setLoginModal(false)}\n      />\n      <SignUpModal\n        isModalOpen={signUpModal}\n        onClose={() => setSignUpModal(false)}\n      />\n\n      <AntHeader\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"end\",\n        }}\n      >\n        <div style={{ display: \"flex\" }}>\n          {!user ? (\n            <React.Fragment>\n              <div\n                style={{\n                  color: \"white\",\n                  fontSize: \"1rem\",\n                  cursor: \"pointer\",\n                }}\n                onClick={() => setLoginModal(true)}\n              >\n                Login\n              </div>\n              <div\n                style={{\n                  color: \"white\",\n                  fontSize: \".9rem\",\n                  padding: \"0 1em\",\n                }}\n              >\n                or\n              </div>\n              <div\n                style={{\n                  color: \"white\",\n                  fontSize: \"1rem\",\n                  cursor: \"pointer\",\n                }}\n                onClick={() => setSignUpModal(true)}\n              >\n                Sign Up\n              </div>\n            </React.Fragment>\n          ) : (\n            <div\n              style={{ color: \"white\", fontSize: \"1rem\", cursor: \"pointer\" }}\n              onClick={onLogout}\n            >\n              ({user.email}) - Logout\n            </div>\n          )}\n        </div>\n      </AntHeader>\n    </React.Fragment>\n  );\n};\n\nexport default Header;\n","import { useEffect, useState } from \"react\";\nimport { supabaseClient } from \"../service/supabase\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport type MESSAGE = {\n  id: string;\n  message: string;\n  user_id: string;\n  created_at: string;\n};\n\nconst useMessage = () => {\n  const [messages, setMessages] = useState<MESSAGE[]>([]);\n  const [limit, setLimit] = useState(2);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    supabaseClient.from(\"messages\").on(\"INSERT\", handleInsert).subscribe();\n  }, [messages]);\n\n  useEffect(() => {\n    setLoading(true);\n    supabaseClient\n      .from(\"messages\")\n      .select()\n      .order(\"created_at\", { ascending: false })\n      .limit(limit)\n      .then((data) => {\n        setLoading(false);\n        if (!data.error && data.data) {\n          data.data.reverse();\n          setMessages(data.data);\n        }\n      });\n  }, [limit]);\n\n  const handleInsert = (payload: { new: MESSAGE }) => {\n    setMessages([...messages, payload.new]);\n  };\n\n  const addNewMessage = async (user_id: string, message: string) => {\n    const { data, error } = await supabaseClient\n      .from(\"messages\")\n      .insert([{ id: uuidv4(), user_id, message }]);\n    return { data, error };\n  };\n\n  const increaseLimit = () => {\n    setLimit(limit + 5);\n  };\n\n  return {\n    loading,\n    messages,\n    addNewMessage,\n    increaseLimit,\n  };\n};\n\nexport default useMessage;\n","import { useRef } from \"react\";\nimport { User } from \"@supabase/supabase-js\";\nimport {\n  message as messageAnt,\n  Col,\n  List,\n  Row,\n  Form,\n  Input,\n  Button,\n} from \"antd\";\n\nimport useMessage, { MESSAGE } from \"../hooks/useMessage\";\n\nconst MessageList = ({ user }: { user: User | null }) => {\n  const { messages, addNewMessage, increaseLimit, loading } = useMessage();\n  const formRef = useRef<any>();\n\n  const onNewMessage = ({ message }: MESSAGE) => {\n    if (user?.id) {\n      formRef.current.resetFields();\n      addNewMessage(user.id, message);\n    } else if (message) {\n      messageAnt.error(\"Please Login / Sign Up\", 2.5);\n    } else {\n      messageAnt.error(\"Enter Message\", 2.5);\n    }\n  };\n\n  return (\n    <Row justify=\"center\" align=\"middle\">\n      <Col xs={22} sm={20} md={16}>\n        <List\n          loading={loading}\n          itemLayout=\"horizontal\"\n          dataSource={messages}\n          style={{\n            height: \"80vh\",\n            display: \"flex\",\n            flexDirection: \"column-reverse\",\n          }}\n          renderItem={(item, index) => {\n            return (\n              <>\n                {index === 0 && (\n                  <List.Item style={{ placeContent: \"center\" }}>\n                    <Button onClick={increaseLimit}>Load More</Button>\n                  </List.Item>\n                )}\n                <List.Item>\n                  <List.Item.Meta\n                    title={item.message}\n                    description={`${new Date(\n                      item.created_at\n                    ).toLocaleDateString()}, ${new Date(\n                      item.created_at\n                    ).toLocaleTimeString()}`}\n                    style={\n                      item.user_id === user?.id ? { textAlign: \"end\" } : {}\n                    }\n                  />\n                </List.Item>\n              </>\n            );\n          }}\n        />\n        <Form\n          ref={(e) => (formRef.current = e)}\n          layout=\"vertical\"\n          initialValues={{ email: \"\", password: \"\" }}\n          wrapperCol={{ style: { textAlign: \"center\" } }}\n          style={{ display: \"flex\" }}\n          onFinish={onNewMessage}\n        >\n          <Form.Item\n            name=\"message\"\n            style={{ width: \"100%\", margin: \"0em 1em\" }}\n          >\n            <Input placeholder=\"Your Message\" />\n          </Form.Item>\n          <Form.Item name=\"message\">\n            <Button type=\"primary\" htmlType=\"submit\">\n              Submit\n            </Button>\n          </Form.Item>\n        </Form>\n      </Col>\n    </Row>\n  );\n};\n\nexport default MessageList;\n","import { useEffect, useState } from \"react\";\nimport { User } from \"@supabase/supabase-js\";\nimport { Layout } from \"antd\";\n\nimport { supabaseClient } from \"./service/supabase\";\n\nimport useAuth from \"./hooks/useAuth\";\n\nimport Header from \"./components/Header\";\nimport MessageList from \"./components/MessageList\";\n\nconst { Content } = Layout;\n\nconst App = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const { getSession } = useAuth();\n\n  useEffect(() => {\n    supabaseClient.auth.onAuthStateChange((auth, session) => {\n      switch (auth) {\n        case \"SIGNED_IN\":\n          session?.user && setUser(session.user);\n          break;\n        case \"SIGNED_OUT\":\n          setUser(null);\n          break;\n        case \"USER_UPDATED\":\n          session?.user && setUser(session.user);\n          break;\n      }\n    });\n  }, []);\n\n  useEffect(() => {\n    getSession().then((session) => {\n      if (session) {\n        setUser(session.user);\n      } else {\n        setUser(null);\n      }\n    });\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Header user={user} />\n      <Content>\n        <MessageList user={user} />\n      </Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}